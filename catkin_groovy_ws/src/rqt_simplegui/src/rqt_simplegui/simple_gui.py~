#!/usr/bin/env python

import roslib
roslib.load_manifest('rospy')
roslib.load_manifest('actionlib')
roslib.load_manifest('actionlib_msgs')
roslib.load_manifest('visualization_msgs')
roslib.load_manifest('geometry_msgs')
roslib.load_manifest('sensor_msgs')


# BAsic imports
from subprocess import call
import rospy
import numpy as np
# Our Node extensions imports
from SwitchServerNode import SwitchNode
from ArmNode import ArmNode
from GripperNode import GripperNode
from BaseNode import BodyNode
from HeadNode import HeadNode
from SpeakNode import SpeakNode
from CreateMovement import CreateMovement
# Qt imports
from qt_gui.plugin import Plugin
from python_qt_binding import QtGui,QtCore
from python_qt_binding.QtGui import QShortcut, QWidget, QFrame, QGroupBox, QInputDialog, QMessageBox
from python_qt_binding.QtCore import QSignalMapper, qWarning, Signal
# Other ROS imports
from visualization_msgs.msg import Marker
from geometry_msgs.msg import Quaternion, Pose, Point, Vector3
from std_msgs.msg import Header, ColorRGBA
from sound_play.msg import SoundRequest
from sensor_msgs.msg import JointState


class SimpleGUI(Plugin):

    joint_sig = Signal(JointState)
    sound_sig = Signal(SoundRequest)
    # Constants to help us move the robot
    HEAD_THETA = 0.0
    HEAD_Z = 1.0
    LEFT_GRIPPER_POSITION = 0.0
    RIGHT_GRIPPER_POSITION = 0.0
    GRIPPER_INTENSITY = 0.0
    MOTION_INTENSITY = 0.0
    ARM_INTENSITY = 0.0

    r_arm_pose_box = QtGui.QComboBox()
    l_arm_pose_box = QtGui.QComboBox()

    def __init__(self, context):
        super(SimpleGUI, self).__init__(context)
        self.setObjectName('SimpleGUI')
        self._widget = QWidget()

        self.saved_r_arm_pose = dict()
        self.saved_l_arm_pose = dict()

        self.switchnode = SwitchNode()
        self.armnode = ArmNode()
        self.grippernode = GripperNode()
        self.basenode = BodyNode()
        self.headnode = HeadNode()
        self.speaknode = SpeakNode()
        

        # Add Clients
        self.marker_publisher = rospy.Publisher('visualization_marker', Marker)

        QtGui.QToolTip.setFont(QtGui.QFont('SansSerif', 10))
        self.sound_sig.connect(self.sound_sig_cb)
        
        # Main layout element for GUI
        large_box = QtGui.QVBoxLayout()
        palette = QtGui.QPalette()
        palette.setColor(QtGui.QPalette.Foreground,QtCore.Qt.blue)
        

        # Create Button box for GUI
	button_box = QtGui.QGridLayout()
        # Add The Buttons to button box here
        button_box.addWidget(self.create_button('Speak'), 2, 5)
        button_box.addWidget(self.create_button('Head ^'), 1, 5)
        button_box.addWidget(self.create_button('Head v'), 3, 5)
        button_box.addWidget(self.create_button('Head >'), 2, 6)
        button_box.addWidget(self.create_button('< Head'), 2, 4)
        button_box.addWidget(self.create_button('LShldr Pan Out'), 5, 2)
	button_box.addWidget(self.create_button('LShldr Pan In'), 5, 3)
        button_box.addWidget(self.create_button('LShldr Lift ^'), 6, 2)
	button_box.addWidget(self.create_button('LShldr Lift v'), 6, 3)
        button_box.addWidget(self.create_button('LUpArm Roll Out'), 7, 2)
        button_box.addWidget(self.create_button('LUpArm Roll In'), 7, 3)
	button_box.addWidget(self.create_button('LElbo Flex ^'), 8, 2)
        button_box.addWidget(self.create_button('LElbo Flex v'), 8, 3)
        button_box.addWidget(self.create_button('LLoArm Roll Out'), 9, 2)
        button_box.addWidget(self.create_button('LLoArm Roll In'), 9, 3)
	button_box.addWidget(self.create_button('LWrst Flex ^'), 10, 2)
        button_box.addWidget(self.create_button('LWrst Flex v'), 10, 3)
        button_box.addWidget(self.create_button('LWrst Roll Out'), 11, 2)
        button_box.addWidget(self.create_button('LWrst Roll In'), 11, 3)
	button_box.addWidget(self.create_button('LGr Close'), 12, 2)
        button_box.addWidget(self.create_button('LGr Open'), 12, 3)
        button_box.addWidget(self.create_button('RShldr Pan Out'), 5, 8)
	button_box.addWidget(self.create_button('RShldr Pan In'), 5, 7)
        button_box.addWidget(self.create_button('RShldr Lift ^'), 6, 8)
	button_box.addWidget(self.create_button('RShldr Lift v'), 6, 7)
        button_box.addWidget(self.create_button('RUpArm Roll Out'), 7, 8)
        button_box.addWidget(self.create_button('RUpArm Roll In'), 7, 7)
	button_box.addWidget(self.create_button('RElbo Flex ^'), 8, 8)
        button_box.addWidget(self.create_button('RElbo Flex v'), 8, 7)
        button_box.addWidget(self.create_button('RLoArm Roll Out'), 9, 8)
        button_box.addWidget(self.create_button('RLoArm Roll In'), 9, 7)
	button_box.addWidget(self.create_button('RWrst Flex ^'), 10, 8)
        button_box.addWidget(self.create_button('RWrst Flex v'), 10, 7)
        button_box.addWidget(self.create_button('RWrst Roll Out'), 11, 8)
        button_box.addWidget(self.create_button('RWrst Roll In'), 11, 7)
        button_box.addWidget(self.create_button('RGr Close'), 12, 8)
        button_box.addWidget(self.create_button('RGr Open'), 12, 7)
	button_box.addWidget(self.create_button('Twist >'), 11, 6)
        button_box.addWidget(self.create_button('< Twist'), 11, 4)        
	button_box.addWidget(self.create_button('Move ^'), 10, 5)
        button_box.addWidget(self.create_button('Move v'), 13, 5)
	button_box.addWidget(self.create_button('< Move'), 12, 4)
        button_box.addWidget(self.create_button('Move >'), 12, 6)

        # Add Button Box to main GUI layout element
        large_box.addLayout(button_box)
        large_box.addItem(QtGui.QSpacerItem(100,20)) 
	
        # Create and add slider box
        gripper_box = QtGui.QHBoxLayout()
        self.gripper_label = QtGui.QLabel('Gripper Intensity: ')
        self.gripper_label.setPalette(palette)
        gripper_box.addWidget(self.gripper_label)
        gripper_box.addWidget(self.create_horizontal_slider('Gripper_Slider'))
	large_box.addLayout(gripper_box)        
        
        # Create and add slider box
        motion_box = QtGui.QHBoxLayout()
        self.motion_label = QtGui.QLabel('Motion Intensity: ')
        self.motion_label.setPalette(palette)
        motion_box.addWidget(self.motion_label)
        motion_box.addWidget(self.create_horizontal_slider('Motion_Slider'))       
	large_box.addLayout(motion_box)

        # Create and add slider box
        arm_box = QtGui.QHBoxLayout()
        self.arm_label = QtGui.QLabel('Arm Intensity: ')
        self.arm_label.setPalette(palette)
        arm_box.addWidget(self.arm_label)
        arm_box.addWidget(self.create_horizontal_slider('Arm_Slider'))       
	large_box.addLayout(arm_box)

        # Speech box for speech display created
        speech_box = QtGui.QVBoxLayout()
        self.speech_label = QtGui.QLabel('Robot is ready to run, press button to start')
        self.speech_label.setPalette(palette)
        speech_box.addWidget(self.speech_label)
        # Speech box added to main layout
        large_box.addLayout(speech_box)

        # Speech box for speech display created
        speech_box_2 = QtGui.QHBoxLayout()
        self.speech_label_2 = QtGui.QLabel('Enter Speech Text: ')
        self.speech_label_2.setPalette(palette)
        speech_box_2.addWidget(self.speech_label_2)
        self.text_in = QtGui.QLineEdit('Thank You')
        speech_box_2.addWidget(self.text_in)
        # Speech box added to main layout
        large_box.addLayout(speech_box_2)
        large_box.addItem(QtGui.QSpacerItem(100,20))
        
        # Add arm freeze/Relax state buttons
        button_box1 = QtGui.QHBoxLayout()
        button_box1.addWidget(self.create_button('Relax right arm'))
        button_box1.addWidget(self.create_button('Freeze right arm'))
        button_box1.addWidget(self.create_button('Relax left arm'))
        button_box1.addWidget(self.create_button('Freeze left arm'))
        large_box.addLayout(button_box1)

        # Add Arm Pose Buttons
        button_box2 = QtGui.QHBoxLayout()
        button_box2.addWidget(self.create_button('Save right arm pose'))
        button_box2.addWidget(self.create_button('Save left arm pose'))
        button_box2.addWidget(self.create_button('Move right arm to selected pose'))
        button_box2.addWidget(self.create_button('Move left arm to selected pose'))
        button_box2.addWidget(self.create_button('Delete selected right arm pose'))
        button_box2.addWidget(self.create_button('Delete selected left arm pose'))
        large_box.addLayout(button_box2)

        # Add predefined arm movements buttons
        button_box3 = QtGui.QHBoxLayout()
        button_box3.addWidget(self.create_button('Wave Arm'))
        button_box3.addWidget(self.create_button('Clap Hands'))
	button_box3.addWidget(self.create_button('Knock Door'))
        button_box3.addStretch(1)
        large_box.addLayout(button_box3)
        large_box.addItem(QtGui.QSpacerItem(100,20))

        # Add temp arm pose drop boxes
        state_box = QtGui.QGridLayout()
        self.r_arm_label = QtGui.QLabel('Saved Right Arm Poses')
        self.r_arm_label.setPalette(palette)
        state_box.addWidget(self.r_arm_label, 1, 1)
        state_box.addWidget(self.r_arm_pose_box, 2, 1)
        self.l_arm_label = QtGui.QLabel('Saved Left Arm Poses')
        self.l_arm_label.setPalette(palette)
        state_box.addWidget(self.l_arm_label, 1, 2)
        state_box.addWidget(self.l_arm_pose_box, 2, 2)
        large_box.addLayout(state_box)
        large_box.addItem(QtGui.QSpacerItem(100,20))

        # Add create arm movements from pose buttons
        button_box3 = QtGui.QHBoxLayout()
        self.arm_move_label = QtGui.QLabel('Saved Arm Movements:')
        self.arm_move_label.setPalette(palette)
        button_box3.addWidget(self.arm_move_label)
        self.arm_move_box = QtGui.QComboBox()
        button_box3.addWidget(self.arm_move_box)
        button_box3.addWidget(self.create_button('Create arm movement'))
        button_box3.addWidget(self.create_button('Initiate selected arm movement'))
        button_box3.addWidget(self.create_button('Delete arm movement'))
        large_box.addLayout(button_box3)

        # Puts layout in widget and adds widget name for RosGUI to identify
        self._widget.setObjectName('SimpleGUI')
        self._widget.setLayout(large_box)
        context.add_widget(self._widget)
        rospy.loginfo('GUI initialization complete.')

	# Create keyboard shortcut
	#sh.setKey("Up")
	#self.connect(sh, QtCore.SIGNAL("activated()"), self.haha)

    def haha(self):
	print("haha")
	    
    
    # Will create a button, with all buttons using same event trigger
    def create_button(self, name):
        btn = QtGui.QPushButton(name, self._widget)
        btn.clicked.connect(self.command_cb)
	if (name == 'Head ^'):
	    sh = QShortcut(self._widget)
	    sh.setKey("Ctrl+w")
	    self.connect(sh, QtCore.SIGNAL("activated()"), self.head_up)
        elif (name == 'Head v'):
	    sh = QShortcut(self._widget)
	    sh.setKey("Ctrl+s")
	    self.connect(sh, QtCore.SIGNAL("activated()"), self.head_down)
        elif (name == '< Head'):
	    sh = QShortcut(self._widget)
	    sh.setKey("Ctrl+a")
	    self.connect(sh, QtCore.SIGNAL("activated()"), self.head_left)
        elif (name == 'Head >'):
	    sh = QShortcut(self._widget)
	    sh.setKey("Ctrl+d")
	    self.connect(sh, QtCore.SIGNAL("activated()"), self.head_right)
	elif (name == 'Move ^'):
	    sh = QShortcut(self._widget)
	    sh.setKey("w")
	    self.connect(sh, QtCore.SIGNAL("activated()"), self.move_forward)
	elif (name == 'Move v'):
	    sh = QShortcut(self._widget)
	    sh.setKey("s")
	    self.connect(sh, QtCore.SIGNAL("activated()"), self.move_backward)
	elif (name == '< Move'):
	    sh = QShortcut(self._widget)
	    sh.setKey("a")
	    self.connect(sh, QtCore.SIGNAL("activated()"), self.move_left)
        elif (name == 'Move >'):
	    sh = QShortcut(self._widget)
	    sh.setKey("d")
	    self.connect(sh, QtCore.SIGNAL("activated()"), self.move_right)
        elif (name == 'Twist >'):
	    sh = QShortcut(self._widget)
	    sh.setKey("e")
	    self.connect(sh, QtCore.SIGNAL("activated()"), self.twist_right)
        elif (name == '< Twist'):
	    sh = QShortcut(self._widget)
	    sh.setKey("q")
	    self.connect(sh, QtCore.SIGNAL("activated()"), self.twist_left)
	elif (name == 'LGr Open'):
	    sh = QShortcut(self._widget)
	    sh.setKey("[")
	    self.connect(sh, QtCore.SIGNAL("activated()"), self.gripper_open_l)
        elif (name == 'LGr Close'):
	    sh = QShortcut(self._widget)
	    sh.setKey("Ctrl+[")
	    self.connect(sh, QtCore.SIGNAL("activated()"), self.gripper_close_l)
        elif (name == 'RGr Open'):
	    sh = QShortcut(self._widget)
	    sh.setKey("]")
	    self.connect(sh, QtCore.SIGNAL("activated()"), self.gripper_open_r)
        elif (name == 'RGr Close'):
	    sh = QShortcut(self._widget)
	    sh.setKey("Ctrl+]")
	    self.connect(sh, QtCore.SIGNAL("activated()"), self.gripper_close_r)


        btn.setAutoRepeat(True)
        return btn

    # Will create a horizontal slider
    def create_horizontal_slider(self, slider_name):
	slider = QtGui.QSlider(1)
        if (slider_name == 'Gripper_Slider'):
	    slider.valueChanged.connect(self.gripper_slider)
        elif (slider_name == 'Motion_Slider'):
            slider.valueChanged.connect(self.motion_slider)
        elif (slider_name == 'Arm_Slider'):
            slider.valueChanged.connect(self.arm_slider)
        slider.setMinimum(0)
        slider.setMaximum(1000)
	return slider

    # Triggered when request to sound_play is made
    def sound_sig_cb(self, sound_request):
        qWarning('Received sound signal.')
        #if (sound_request.command == SoundRequest.SAY):
        qWarning('Robot said: ' + sound_request.arg)
        # self.speech_label.setText('Robot said: ' + sound_request.arg)

    # Triggered When Subscribber to robot sound detects a message
    def sound_cb(self, sound_request):
        qWarning('Received sound.')
        self.sound_sig.emit(sound_request)
        return

    def gripper_slider(self):
	self.GRIPPER_INTENSITY = float(self._widget.sender().sliderPosition())/10000.0
        
    def motion_slider(self):
        self.MOTION_INTENSITY = float(self._widget.sender().sliderPosition())/1000.0

    def arm_slider(self):
        self.ARM_INTENSITY = float(self._widget.sender().sliderPosition())/1000.0

    def show_text_in_rviz(self, text):
        marker = Marker(type=Marker.TEXT_VIEW_FACING, id=0,
                    lifetime=rospy.Duration(1.5),
                    pose=Pose(Point(0.5, 0.5, 1.5), Quaternion(0, 0, 0, 1)),
                    scale=Vector3(0.06, 0.06, 0.06),
                    header=Header(frame_id='base_link'),
                    color=ColorRGBA(0.0, 1.0, 0.0, 0.8), text=text)
        self.marker_publisher.publish(marker)

    def save_pose(self, side_prefix):
        text, ok = QInputDialog.getText(None, str('New Arm ' + side_prefix + ' pose'), str('Enter Name of new pose: '))
        if ok:
            if (side_prefix == 'r'):
               self.r_arm_pose_box.addItem(text)
               self.saved_r_arm_pose[text] = self.armnode.get_joint_state('r')
               print('Saved right arm pose: ' + str(np.round(self.saved_r_arm_pose[text], 1)))
            else:
               self.l_arm_pose_box.addItem(text)
               self.saved_l_arm_pose[text] = self.armnode.get_joint_state('l')
               print('Saved left arm pose: ' + str(np.round(self.saved_l_arm_pose[text], 1)))
    
    def delete_pose(self, side_prefix):
        if (side_prefix == 'r'):
            if len(self.saved_r_arm_pose) > 0:
                del self.saved_r_arm_pose[self.r_arm_pose_box.currentText()]
                self.r_arm_pose_box.removeItem(self.r_arm_pose_box.findText(self.r_arm_pose_box.currentText()))
        else:
            if len(self.saved_l_arm_pose) > 0:
                del self.saved_l_arm_pose[self.l_arm_pose_box.currentText()]
                self.l_arm_pose_box.removeItem(self.l_arm_pose_box.findText(self.l_arm_pose_box.currentText()))
            
    def move_arm(self, side_prefix):
        if (side_prefix == 'r'):
            if len(self.saved_r_arm_pose) == 0:
                rospy.logerr('There are no right arm poses saved yet, cannot move.')
                errBox = QMessageBox()
                errBox.setWindowTitle('Error')
                errBox.setText('There are no right arm poses saved yet, cannot move.')
                errBox.exec_()
            else:
                self.freeze_arm('r')
                self.armnode.move_to_joints('r', self.saved_r_arm_pose[self.r_arm_pose_box.currentText()], 2.0)
        else:
            if len(self.saved_l_arm_pose) == 0:
                rospy.logerr('There are no left arm poses saved yet, cannot move.')
                errBox = QMessageBox()
                errBox.setWindowTitle('Error')
                errBox.setText('There are no left arm poses saved yet, cannot move.')
                errBox.exec_()
            else:
                self.freeze_arm('l')
                self.armnode.move_to_joints('l', self.saved_l_arm_pose[self.l_arm_pose_box.currentText()], 2.0)
                pass

    def relax_arm(self, side_prefix):
        controller_name = side_prefix + '_arm_controller'
        start_controllers = []
        stop_controllers = [controller_name]
    def freeze_arm(self, side_prefix):
        controller_name = side_prefix + '_arm_controller'
        start_controllers = [controller_name]
        stop_controllers = []
        self.armnode.set_arm_mode(start_controllers, stop_controllers, self.switchnode)

    def head_down(self):
	self.show_text_in_rviz('Robot Head Will Move Down')
        self.HEAD_Z -= 0.1
        self.headnode.moveHead(self.HEAD_THETA, self.HEAD_Z)
	speechLabel = 'Head is moving down'

    def head_up(self):
	self.show_text_in_rviz('Robot Head Will Move Up')
        self.HEAD_Z += 0.1
        self.headnode.moveHead(self.HEAD_THETA, self.HEAD_Z)
	speechLabel = 'Head is moving up'

    def head_right(self):
	self.show_text_in_rviz('Robot Head Will Move Right')
        self.HEAD_THETA -= 0.1
        self.headnode.moveHead(self.HEAD_THETA, self.HEAD_Z)
	speechLabel = 'Head is turning to the right'

    def head_left(self):
	self.show_text_in_rviz('Robot Head Will Move Left')
        self.HEAD_THETA += 0.1
        self.headnode.moveHead(self.HEAD_THETA, self.HEAD_Z)
	speechLabel = 'Head is turning to the left'

    def move_forward(self):
	self.show_text_in_rviz('Robot base will move forward.')
        self.basenode.moveBody(self.MOTION_INTENSITY, 0.0, 0.0)
	speechLabel = 'Move the robot forward'

    def move_backward(self):
	self.show_text_in_rviz('Robot base will move backward.')
        self.basenode.moveBody(-self.MOTION_INTENSITY, 0.0, 0.0)
	speechLabel = 'Move the robot backwards'

    def move_left(self):
	self.show_text_in_rviz('Robot base will move to the left.')
        self.basenode.moveBody(0.0, self.MOTION_INTENSITY, 0.0)
	speechLabel = 'Move the robot to the left'

    def move_right(self):
	self.show_text_in_rviz('Robot base will move to the right.')
        self.basenode.moveBody(0.0, -self.MOTION_INTENSITY, 0.0)
	speechLabel = 'Move the robot to the right'

    def twist_right(self):
	self.show_text_in_rviz('Robot base will twist right.')
        self.basenode.twistBody(0.0, 0.0, -self.MOTION_INTENSITY)
	speechLabel = 'Twisting the robot base to the right'

    def twist_left(self):
	self.show_text_in_rviz('Robot base will twist left.')
        self.basenode.twistBody(0.0, 0.0, self.MOTION_INTENSITY)
	speechLabel = 'Twisting the robot base to the left'
   
    def gripper_open_l(self):
 	self.show_text_in_rviz('Left Robot Gripper Will Open')
        self.LEFT_GRIPPER_POSITION += self.GRIPPER_INTENSITY
        self.grippernode.changeGripper('l', self.LEFT_GRIPPER_POSITION)
        speechLabel = 'Opening the left gripper'

    def gripper_open_r(self):
	self.show_text_in_rviz('Right Robot Gripper Will Open')
        self.RIGHT_GRIPPER_POSITION += self.GRIPPER_INTENSITY
        self.grippernode.changeGripper('r', self.RIGHT_GRIPPER_POSITION)
        speechLabel = 'Opening the right gripper'
    
    def gripper_close_l(self):
	self.show_text_in_rviz('Left Robot Gripper Will Close')
        self.LEFT_GRIPPER_POSITION -= self.GRIPPER_INTENSITY
        self.grippernode.changeGripper('l', self.LEFT_GRIPPER_POSITION)
	speechLabel = 'Closing the left gripper'

    def gripper_close_r(self):
	self.show_text_in_rviz('Right Robot Gripper Will Close')
        self.RIGHT_GRIPPER_POSITION -= self.GRIPPER_INTENSITY
        self.grippernode.changeGripper('r', self.RIGHT_GRIPPER_POSITION)
	speechLabel = 'Closing the right gripper'
	
    # Triggered when button is pressed: Place response actions here
    def command_cb(self):
        button_name = self._widget.sender().text()
	speechLabel = '';
        if (button_name == 'Speak'):
            qWarning('Robot will say: ' + self.text_in.text())
            self.show_text_in_rviz('Robot will say: ' + self.text_in.text())
            self.speaknode.speak(self.text_in.text())
	    speechLabel = 'said: ' + self.text_in.text();
        elif (button_name == 'Head ^'):
            self.head_up()      
	elif (button_name == 'Head v'):
            self.head_down()
        elif (button_name == 'Head >'):
            self.head_right()
        elif (button_name == '< Head'):
            self.head_left()
        elif (button_name == 'LGr Open'):
            self.gripper_open_l()
        elif (button_name == 'LGr Close'):
            self.gripper_close_l()
        elif (button_name == 'RGr Open'):
            self.gripper_open_r()
        elif (button_name == 'RGr Close'):
            self.gripper_close_r()
	elif (button_name == 'Twist >'):
            self.twist_right()
        elif (button_name == '< Twist'):
            self.twist_left()
	elif (button_name == 'Move ^'):
            self.move_forward()
        elif (button_name == 'Move v'):
            self.move_backward()
	elif (button_name == '< Move'):
            self.move_left()
        elif (button_name == 'Move >'):
            self.move_right()
        elif (button_name == 'Relax right arm'):
            self.relax_arm('r')
            speechLabel = 'Relaxing right arm';
        elif (button_name == 'Freeze right arm'):
            self.freeze_arm('r')
            speechLabel = 'Freezing right arm';
        elif (button_name == 'Relax left arm'):
            self.relax_arm('l')
            speechLabel = 'Relaxing left arm';
        elif (button_name == 'Freeze left arm'):
            self.freeze_arm('l')
            speechLabel = 'Freezing left arm';
        elif (button_name == 'Save right arm pose'):
            self.save_pose('r')
            speechLabel = 'Saving right arm pose';
        elif (button_name == 'Save left arm pose'):
            self.save_pose('l')
            speechLabel = 'Saving left arm pose';
        elif (button_name == 'Move right arm to selected pose'):
            self.move_arm('r')
            speechLabel = 'Moving right arm';
        elif (button_name == 'Move left arm to selected pose'):
            self.move_arm('l')
            speechLabel = 'Moving left arm';
        elif (button_name == 'Delete selected right arm pose'):
            self.delete_pose('r')
            speechLabel = 'Deleting selected right arm pose';
        elif (button_name == 'Delete selected left arm pose'):
            self.delete_pose('l')
            speechLabel = 'Deleting selected left arm pose';
        elif (button_name == 'LShldr Pan Out'):
            positions = self.armnode.get_joint_state('l')
            positions[0] += self.ARM_INTENSITY
            self.armnode.move_to_joints('l', positions, 0.0)
            speechLabel = 'Moving left shoulder outward';
        elif (button_name == 'LShldr Pan In'):
            positions = self.armnode.get_joint_state('l')
            positions[0] -= self.ARM_INTENSITY
            self.armnode.move_to_joints('l', positions, 0.0)
            speechLabel = 'Moving left shoulder inward';
        elif (button_name == 'LShldr Lift ^'):
            positions = self.armnode.get_joint_state('l')
            positions[1] -= self.ARM_INTENSITY
            self.armnode.move_to_joints('l', positions, 0.0)
            speechLabel = 'Flexing left shoulder upward';
        elif (button_name == 'LShldr Lift v'):
            positions = self.armnode.get_joint_state('l')
            positions[1] += self.ARM_INTENSITY
            self.armnode.move_to_joints('l', positions, 0.0)
            speechLabel = 'Flexing left shoulder downward';
        elif (button_name == 'LUpArm Roll Out'):
            positions = self.armnode.get_joint_state('l')
            positions[2] -= self.ARM_INTENSITY
            self.armnode.move_to_joints('l', positions, 0.0)
            speechLabel = 'Rolling left upper arm outward';
        elif (button_name == 'LUpArm Roll In'):
            positions = self.armnode.get_joint_state('l')
            positions[2] += self.ARM_INTENSITY
            self.armnode.move_to_joints('l', positions, 0.0)
            speechLabel = 'Rolling left upper arm inward';
        elif (button_name == 'LElbo Flex ^'):
            positions = self.armnode.get_joint_state('l')
            positions[3] -= self.ARM_INTENSITY
            self.armnode.move_to_joints('l', positions, 0.0)
            speechLabel = 'Flexing left elbow upward';
        elif (button_name == 'LElbo Flex v'):
            positions = self.armnode.get_joint_state('l')
            positions[3] += self.ARM_INTENSITY
            self.armnode.move_to_joints('l', positions, 0.0)
            speechLabel = 'Flexing left elbow downward';
        elif (button_name == 'LLoArm Roll Out'):
            positions = self.armnode.get_joint_state('l')
            positions[4] -= self.ARM_INTENSITY
            self.armnode.move_to_joints('l', positions, 0.0)
            speechLabel = 'Rolling left lower arm outward';
        elif (button_name == 'LLoArm Roll In'):
            positions = self.armnode.get_joint_state('l')
            positions[4] += self.ARM_INTENSITY
            self.armnode.move_to_joints('l', positions, 0.0)
            speechLabel = 'Rolling left lower arm inward';
        elif (button_name == 'LWrst Flex ^'):
            positions = self.armnode.get_joint_state('l')
            positions[5] -= self.ARM_INTENSITY
            self.armnode.move_to_joints('l', positions, 0.0)
            speechLabel = 'Flexing left wrist upward';
        elif (button_name == 'LWrst Flex v'):
            positions = self.armnode.get_joint_state('l')
            positions[5] += self.ARM_INTENSITY
            self.armnode.move_to_joints('l', positions, 0.0)
            speechLabel = 'Flexing left wrist downward';
        elif (button_name == 'LWrst Roll Out'):
            positions = self.armnode.get_joint_state('l')
            positions[6] -= self.ARM_INTENSITY
            self.armnode.move_to_joints('l', positions, 0.0)
            speechLabel = 'Rolling left wrist outward';
        elif (button_name == 'LWrst Roll In'):
            positions = self.armnode.get_joint_state('l')
            positions[6] += self.ARM_INTENSITY
            self.armnode.move_to_joints('l', positions, 0.0)
            speechLabel = 'Rolling left wrist inward';
        elif (button_name == 'RShldr Pan Out'):
            positions = self.armnode.get_joint_state('r')
            positions[0] -= self.ARM_INTENSITY
            self.armnode.move_to_joints('r', positions, 0.0)
            speechLabel = 'Moving right shoulder outward';
        elif (button_name == 'RShldr Pan In'):
            positions = self.armnode.get_joint_state('r')
            positions[0] += self.ARM_INTENSITY
            self.armnode.move_to_joints('r', positions, 0.0)
            speechLabel = 'Moving right shoulder inward';
        elif (button_name == 'RShldr Lift ^'):
            positions = self.armnode.get_joint_state('r')
            positions[1] -= self.ARM_INTENSITY
            self.armnode.move_to_joints('r', positions, 0.0)
            speechLabel = 'Flexing right shoulder upward';
        elif (button_name == 'RShldr Lift v'):
            positions = self.armnode.get_joint_state('r')
            positions[1] += self.ARM_INTENSITY
            self.armnode.move_to_joints('r', positions, 0.0)
            speechLabel = 'Flexing right shoulder downward';
        elif (button_name == 'RUpArm Roll Out'):
            positions = self.armnode.get_joint_state('r')
            positions[2] += self.ARM_INTENSITY
            self.armnode.move_to_joints('r', positions, 0.0)
            speechLabel = 'Rolling right upper arm outward';
        elif (button_name == 'RUpArm Roll In'):
            positions = self.armnode.get_joint_state('r')
            positions[2] -= self.ARM_INTENSITY
            self.armnode.move_to_joints('r', positions, 0.0)
            speechLabel = 'Rolling right upper arm inward';
        elif (button_name == 'RElbo Flex ^'):
            positions = self.armnode.get_joint_state('r')
            positions[3] -= self.ARM_INTENSITY
            self.armnode.move_to_joints('r', positions, 0.0)
            speechLabel = 'Flexing right elbow upward';
        elif (button_name == 'RElbo Flex v'):
            positions = self.armnode.get_joint_state('r')
            positions[3] += self.ARM_INTENSITY
            self.armnode.move_to_joints('r', positions, 0.0)
            speechLabel = 'Flexing right elbow downward';
        elif (button_name == 'RLoArm Roll Out'):
            positions = self.armnode.get_joint_state('r')
            positions[4] += self.ARM_INTENSITY
            self.armnode.move_to_joints('r', positions, 0.0)
            speechLabel = 'Rolling right lower arm outward';
        elif (button_name == 'RLoArm Roll In'):
            positions = self.armnode.get_joint_state('r')
            positions[4] -= self.ARM_INTENSITY
            self.armnode.move_to_joints('r', positions, 0.0)
            speechLabel = 'Rolling right lower arm inward';
        elif (button_name == 'RWrst Flex ^'):
            positions = self.armnode.get_joint_state('r')
            positions[5] -= self.ARM_INTENSITY
            self.armnode.move_to_joints('r', positions, 0.0)
            speechLabel = 'Flexing right wrist upward';
        elif (button_name == 'RWrst Flex v'):
            positions = self.armnode.get_joint_state('r')
            positions[5] += self.ARM_INTENSITY
            self.armnode.move_to_joints('r', positions, 0.0)
            speechLabel = 'Flexing right wrist downward';
        elif (button_name == 'RWrst Roll Out'):
            positions = self.armnode.get_joint_state('r')
            positions[6] += self.ARM_INTENSITY
            self.armnode.move_to_joints('r', positions, 0.0)
            speechLabel = 'Rolling right wrist outward';
        elif (button_name == 'RWrst Roll In'):
            positions = self.armnode.get_joint_state('r')
            positions[6] -= self.ARM_INTENSITY
            self.armnode.move_to_joints('r', positions, 0.0)
            speechLabel = 'Rolling right wrist inward';
        elif (button_name == 'Wave Arm'):
            self.armnode.wave_motion()
            speechLabel = 'waving arm';
        elif (button_name == 'Clap Hands'):
            self.armnode.clap_motion()
            speechLabel = 'clapping hands'
	elif (button_name == 'Knock Door'):
	    self.armnode.knock_motion()
	    speechLabel = 'knocking door'
        elif (button_name == 'Create arm movement'):
            self.create_motion()
            speechLabel = 'is creating new arm movement';
        elif (button_name == 'Initiate selected arm movement'):
            speechLabel = 'is moving its arms';
        elif (button_name == 'Delete arm movement'):
            speechLabel = 'is deleting selected arm movement';
        self.speech_label.setText('Robot ' + speechLabel)

    def create_motion(self):
        armpopup = CreateMovement(self)
        armpopup._widget.show()

    def shutdown_plugin(self):
        # TODO unregister all publishers here
        # Leave both arm controllers on
        start_controllers = ['r_arm_controller', 'l_arm_controller']
        stop_controllers = []
        self.armnode.set_arm_mode(start_controllers, stop_controllers, self.switchnode)

    def save_settings(self, plugin_settings, instance_settings):
        # TODO save intrinsic configuration, usually using:
        # instance_settings.set_value(k, v)
        pass

    def restore_settings(self, plugin_settings, instance_settings):
        # TODO restore intrinsic configuration, usually using:
        # v = instance_settings.value(k)
        pass

